openapi: 3.0.0
info:
  title: "Swagger for the Akvelon test task"
  version: "1.0"

paths:
  /users:
    put:
      description: "Create a new user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountSchema'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: 'Malformed input'
        '409':
          description: 'Cannot create a user account with such data'
  /users/{account_id}:
    parameters:
      - in: path
        name: account_id
        description: "Account's id"
        required: true
        schema:
          type: integer
    get:
      description: "Get info about particular account"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSchema'
        '404':
          description: 'User not found'
    patch:
      description: "Update info about particular user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountSchema'
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Malformed input'
        '404':
          description: 'User not found'
    delete:
      description: 'Delete a user with specified id'
      responses:
        '200':
          description: 'OK'
        '404':
          description: 'User not found'

  /users/{account_id}/transactions:
    parameters:
      - in: path
        name: account_id
        description: "Account's id"
        required: true
        schema:
          type: integer

    get:
      description: "Get all user's transactions"
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          description: Start date to consider for filtering
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: End date to consider for filtering
        - in: query
          name: filter
          schema:
            type: string
            enum:
              - income
              - outcome
        - in: query
          name: sort_by
          schema:
            type: string
            enum:
              - date
              - amount
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionSchema'
    post:
      description: 'Create a record about new transaction'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTransactionSchema'
      responses:
        '201':
          description: 'Created'
        '404':
          description: 'User not found'
        '409':
          description: 'Cannot create a transaction record'

  /users/{account_id}/transactions/statistics:
    parameters:
      - in: path
        name: account_id
        description: "Account's id"
        required: true
        schema:
          type: integer
      - in: query
        name: start_date
        schema:
          type: string
          format: date
        description: Start date to consider for filtering
      - in: query
        name: end_date
        schema:
          type: string
          format: date
        description: End date to consider for filtering
    get:
      description: "Get all user's transactions grouped by day"
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DayStats'

  /users/{account_id}/transactions/{transaction_id}:
    parameters:
      - in: path
        name: account_id
        description: "Account's id"
        required: true
        schema:
          type: integer
      - in: path
        name: transaction_id
        description: 'Id of the transaction'
        required: true
        schema:
          type: string

    get:
      description: 'Get info about particular transaction'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSchema'
    patch:
      description: 'Update info about particular transaction'
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Malformed input'
        '404':
          description: 'No such a resource'

    delete:
      description: 'Delete particular transaction'
      responses:
        '200':
          description: 'OK'
        '404':
          description: 'No such a resource'




components:

  schemas:
    NewAccountSchema:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
      required:
        - first_name
        - second_name
        - email

    AccountSchema:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string

    NewTransactionSchema:
      type: object
      properties:
        amount:
          type: number
        date:
          type: string
          format: 'date-time'
        idempotency_key:
          type: string

    TransactionSchema:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        amount:
          type: number
        date:
          type: string
          format: 'date-time'

    DayStats:
      type: object
      properties:
        date:
          type: string
          format: date
        sum:
          type: number